<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="570" height="900" pageTitle="Openmeetings" fontSize="12"
		applicationComplete="appInit(event)" uncaughtError="uncaughtError(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:TraceTarget/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import mx.core.FlexGlobals;
		import mx.utils.UIDUtil;

		import org.apache.openmeetings.OmVideo;

		private var audioOnly:Boolean = false;
		private var FPS:int;
		private var bandwidth:int = 0;
		private var quality:int = 100;
		private var echoPath:int = 256;
		private var echoSuppression:Boolean = true;
		private var microphoneRateBest:int = 22;//5, 8, 11, 22, and 44
		private var selectedMic:int = -1;
		private var selectedCam:int = -1;
		private var video:OmVideo;
		private var recName:String;
		private var mic:Microphone = null;
		[Bindable]
		private var interview:Boolean = false;

		private function debug(...rest):void {
			ExternalInterface.call("console.log", rest);
		}

		private function camAvail():Boolean {
			return !audioOnly && Camera.names.length > 0;
		}

		private function micAvail():Boolean {
			return Microphone.names.length > 0;
		}

		private function appInit(evt:Event):void {
			var params:Object = FlexGlobals.topLevelApplication.parameters;
			debug("appInit()", params);
			audioOnly = 'true' == params.audioOnly;
			interview = 'true' == params.interview;
			var _fps:int = parseInt(params.fps);
			FPS = (isNaN(_fps) || _fps < 1 ? 30 : _fps);
			video = new OmVideo(videoDisplay, params);
			switch (params.mode) {
				case 'settings':
				{
					ExternalInterface.addCallback("getDevices", function ():Object {
						return {
							cams: Camera.names
							, mics: Microphone.names
						};
					});
					ExternalInterface.addCallback("camChanged", function (val:int):void {
						selectedCam = val;
						camChanged(null);
					});
					ExternalInterface.addCallback("micChanged", function (val:int):void {
						selectedMic = val;
						camChanged(null);
					});
					ExternalInterface.addCallback("resChanged", function (width:int, height:int):void {
						setResolution(width, height, true);
					});
					ExternalInterface.addCallback("close", function ():void {
						video.reset();
					});
					ExternalInterface.addCallback("init", function (camIdx:int, micIdx:int, width:int, height:int):void {
						selectedCam = camIdx;
						selectedMic = micIdx;
						setResolution(width, height, true);
					});
					ExternalInterface.addCallback("startRec", function ():void {
						startTestRecording();
					});
					ExternalInterface.addCallback("play", function ():void {
						playTestRecording();
					});
					ExternalInterface.call("VideoSettings.initSwf");
				}
					break;
				case OmVideo.BROADCAST:
				{
					selectedCam = params.cam;
					selectedMic = params.mic;
					video.resize(Math.max(300, params.width), Math.max(200, params.height));
					attachCamera(function():void {
						video.resize(params.width, params.height);
						video.reset();
						var cam:Camera = getCam();
						video.attachCamera(cam);
						video.broadcast(UIDUtil.createUID(), cam, getMic());
						ExternalInterface.call("VideoManager.resetSize", params.uid);
					});
				}
					break;
				case OmVideo.PLAY:
				{
					video.resize(params.width, params.height);
					video.play(params.broadcastId); // TODO audio/video
				}
					break;
			}
			ExternalInterface.addCallback("vidResize", function (width:int, height:int):void {
				video.resize(width, height);
				video.vidResize(width, height);
			});
		}

		private function uncaughtError(e:UncaughtErrorEvent):void {
			debug("Unexpected ERROR", e);
		}

		private function getMic():Microphone {
			debug("Entering getMic ...");
			var _micro:Microphone = null;
			if (selectedMic > -1) {
				_micro = echoPath == 0 ? Microphone.getMicrophone(selectedMic) : Microphone.getEnhancedMicrophone(selectedMic);

				if (_micro != null) {
					if (echoPath == 256) {
						var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
						options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
						options.echoPath = echoPath;
						options.nonLinearProcessing = true;
						_micro.enhancedOptions = options;
						debug("echoPath set to " + echoPath + ", " + _micro.enhancedOptions);
					}
					_micro.codec = SoundCodec.NELLYMOSER;
					_micro.framesPerPacket = 1;
					_micro.setSilenceLevel(0, 2000);
					debug("canvas.microphoneRateBest: " + microphoneRateBest);
					_micro.rate = microphoneRateBest;
					_micro.gain = 50;
					// this has no effect if enhanced microphone is obtained
					//Microphone setUseEchoSupression(bool)
					debug("canvas.echoSuppression: " + echoSuppression);
					_micro.setUseEchoSuppression(echoSuppression);
				}
				debug("... getMic DONE" + _micro);
			}
			return _micro;
		}

		private function getCam():Camera {
			debug("Entering getCam ...");
			var _camera:Camera = null;
			if (selectedCam > -1) {
				_camera = Camera.getCamera("" + selectedCam);
				if (_camera != null && !_camera.muted) {
					//FIXME need to be unified
					if (interview) {
						//we need a fixed frame rate for the videos to merge them later on
						_camera.setMode(video.width, video.height, 24);
						debug("IS INTERVIEW ");
						_camera.setQuality(0, 98);
					} else {
						_camera.setMode(video.width, video.height, FPS);
						debug("IS NO INTERVIEW ");
						_camera.setQuality(bandwidth, quality);
					}
				}
				debug("... getCam DONE " + _camera);
			}
			return _camera;
		}

		private function attachCamera(callback:Function):void {
			if (!camAvail()) {
				return;
			}
			debug("Camera selected:: " + selectedCam);
			var cam:Camera = getCam();
			debug("Camera selected:: " + cam, cam.muted);
			if (cam != null) {
				if (cam.muted) {
					debug("Camera Muted");
					video.attachCamera(cam);
					cam.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
						debug("cameraStatusHandler! " + event);
						cam.removeEventListener(StatusEvent.STATUS, arguments.callee);
						switch (event.code) {
							case 'Camera.Muted':
								debug("Unable to connect to active camera.");
								break;
							case 'Camera.Unmuted':
								callback();
								break;
						}
					});
				} else {
					callback();
				}
			} else {
				var _mic:Microphone = getMic();
				if (_mic != null) {
					if (_mic.muted) {
						var nc:NetConnection = new NetConnection();
						nc.connect(null);
						var ns:NetStream = new NetStream(nc);
						ns.attachAudio(_mic);
						_mic.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
							debug("micStatusHandler! " + event);
							_mic.removeEventListener(StatusEvent.STATUS, arguments.callee);
							ns.close();
							nc.close();
							if (_mic.muted) {
								debug("Unable to connect to active microphone.");
							} else {
								ExternalInterface.call("VideoSettings.allowRec", true);
							}
						});
					}
				}
			}
		}

		private function _attachCamera(cam:Camera):void {
			debug("_attachCamera():: muted ? " + cam.muted);
			if (cam.muted) {
				debug("Unable to connect to active camera.");
			} else {
				try {
					video.reset();
					video.attachCamera(cam);
					debug("_attachCamera()::done");
				} catch (error:Error) {
					debug("_attach:: " + error.message + "\n" + error.getStackTrace());
				}
			}
		}

		private function settingsCameraCallback():void {
			ExternalInterface.call("VideoSettings.allowRec", true);
			_attachCamera(getCam());
		}

		private function setResolution(width:int, height:int, attach:Boolean):void {
			if (!interview) {
				debug("onselect WxH :: " + width + "x" + height);

				video.resize(width, height);

				if (attach) {
					attachCamera(settingsCameraCallback);
				}
			}
		}

		private function camChanged(e:Event):void {
			attachCamera(settingsCameraCallback);
		}

		private function playTestRecording():void {
			video.play(recName + ".flv");
		}

		private function startTestRecording():void {
			try {
				var counter:int = 5;
				timerText.visible = true;
				timerText.text = "5 sec";
				var recTimer:Timer = new Timer(1000, counter);
				var t:Date = new Date();
				recName = "TEST_SETUP_" + t.getTime();
				mic = getMic();
				var activityTimer:Timer = new Timer(100);
				activityTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void {
					ExternalInterface.call("VideoSettings.micActivity", mic.activityLevel);
				});
				video.record(recName, getCam(), mic, function ():void {
					if (mic != null) {
						activityTimer.start();
					}
					recTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void {
						timerText.text = --counter + " sec";
						if (counter == 0) {
							timerText.visible = false;
							ExternalInterface.call("VideoSettings.allowPlay");
							playTestRecording();
							activityTimer.stop();
							mic = null;
						}
					});
					recTimer.start();
				});
			} catch (err:Error) {
				debug("ERROR: " + err);
			}
		}
		]]></fx:Script>

	<mx:UIComponent id="videoDisplay" width="0" height="0" />
	<s:Label id="timerText" height="20" width="45" x="20" y="5" paddingLeft="5" paddingTop="5"
			 visible="false" backgroundColor="0xf5f5f5" fontWeight="bold"><s:text></s:text></s:Label>
</s:Application>
