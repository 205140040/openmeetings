<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<s:Application
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:nettest="org.apache.openmeetings.nettest.*"
		name="nettest"
		width="570" height="900" pageTitle="OpenMeetings" fontSize="12" focusEnabled="true"
		initialize="appInit(event)" uncaughtError="uncaughtError(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:TraceTarget/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import mx.core.FlexGlobals;
		import flash.desktop.Clipboard;
		import flash.desktop.ClipboardFormats;

		public var params:Object = {};
		private var logStr:String = "";
		public var busy:Boolean = false;

		[Embed(source="assets/edit-copy.png")]
		[Bindable]
		private var copyImgCls:Class;
		[Bindable]
		private var labels:Object = {};

		public function debug(...rest):void {
			if ('true' === params.debug) {
				ExternalInterface.call("console.log", rest);
			}
		}

		private function appInit(evt:Event):void {
			this.params = FlexGlobals.topLevelApplication.parameters;
			debug("appInit()", params);
			var lbls:Array = ExternalInterface.call("getStringLabels");
			for (var i:int = 0; i < lbls.length; ++i) {
				labels[lbls[i].id] = lbls[i].value;
			}
		}

		private function uncaughtError(e:UncaughtErrorEvent):void {
			debug("Unexpected ERROR", e);
		}

		public function lbl(key:String):String {
			var s:String = labels['network.test.' + key];
			return !!s ? s : "Missing[" + key + "]";
		}

		public function log(str:String):void {
			logStr += str;
			debug(str);
		}
	]]></fx:Script>

	<s:HGroup id="tests" paddingBottom="15">
		<nettest:PingTest id="pingTest"/>
		<nettest:PortAvailabilityTest id="portTest"/>
		<nettest:JitterTest id="jitterTest"/>
		<nettest:DownloadSpeedTest id="speedTest"/>
	</s:HGroup>
</s:Application>
